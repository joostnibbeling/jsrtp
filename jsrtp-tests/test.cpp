#include "gtest/gtest.h"
#include "../jsrtp/AES.h"
#include "../jsrtp/container_slice.h"



TEST(AES, sbox)
{
	uint8_t in = 0x9a;
	uint8_t out = AES::sbox::substitute(in);
	uint8_t expected = 0xb8;

	EXPECT_EQ(out, expected);
}

TEST(AES, inverted_sbox)
{
	uint8_t in = 0xb8;
	uint8_t out = AES::sbox::inverse_substitute(in);
	uint8_t expected = 0x9a;

	EXPECT_EQ(out, expected);
}


TEST(AES, key_schedule)
{
	std::vector<uint8_t> test_key = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	AES::KeySchedule schedule;
	schedule.set_key(test_key);

	std::array<uint8_t, 16> e_rk1 = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	auto rk1_it = schedule.get_round_key(0);
	std::array<uint8_t, 16> rk1;
	std::copy(rk1_it, rk1_it + AES::block_size, rk1.begin());
	EXPECT_EQ(rk1, e_rk1);

	std::array<uint8_t, 16> e_rk4 = { 0xA1, 0x12, 0x02, 0xC9, 0xB4, 0x68, 0xBE, 0xA1, 0xD7, 0x51, 0x57, 0xA0, 0x14, 0x52, 0x49, 0x5B };
	auto rk4_it = schedule.get_round_key(4);
	std::array<uint8_t, 16> rk4;
	std::copy(rk4_it, rk4_it + AES::block_size, rk4.begin());
	EXPECT_EQ(rk4, e_rk4);

	std::array<uint8_t, 16> e_rk10 = { 0x28, 0xFD, 0xDE, 0xF8, 0x6D, 0xA4, 0x24, 0x4A, 0xCC, 0xC0, 0xA4, 0xFE, 0x3B, 0x31, 0x6F, 0x26 };
	auto rk10_it = schedule.get_round_key(10);
	std::array<uint8_t, 16> rk10;
	std::copy(rk10_it, rk10_it + AES::block_size, rk10.begin());
	EXPECT_EQ(rk10, e_rk10);
}


TEST(AES, encryption)
{
	AES::AES aes_cipher;

	std::vector<uint8_t> test_key = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> plain_text = { 0x54, 0x77, 0x6F, 0x20, 0x4F, 0x6E, 0x65, 0x20, 0x4E, 0x69, 0x6E, 0x65, 0x20, 0x54, 0x77, 0x6F };
	std::vector<uint8_t> e_cipher_text = { 0x29, 0xC3, 0x50, 0x5F, 0x57, 0x14, 0x20, 0xF6, 0x40, 0x22, 0x99, 0xB3, 0x1A, 0x02, 0xD7, 0x3A };

	aes_cipher.set_key(test_key);

	auto cipher_text = aes_cipher.encrypt(plain_text);

	EXPECT_EQ(e_cipher_text, cipher_text);
}

TEST(AES, decryption)
{
	AES::AES aes_cipher;

	std::vector<uint8_t> test_key = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> cipher_text = { 0x29, 0xC3, 0x50, 0x5F, 0x57, 0x14, 0x20, 0xF6, 0x40, 0x22, 0x99, 0xB3, 0x1A, 0x02, 0xD7, 0x3A };
	std::vector<uint8_t> e_plain_text = { 0x54, 0x77, 0x6F, 0x20, 0x4F, 0x6E, 0x65, 0x20, 0x4E, 0x69, 0x6E, 0x65, 0x20, 0x54, 0x77, 0x6F };


	aes_cipher.set_key(test_key);

	auto plain_text = aes_cipher.decrypt(cipher_text);

	EXPECT_EQ(e_plain_text, plain_text);
}


TEST(container_slice, vector_slice_init)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin(), input.end());
	EXPECT_EQ(slice.size(), input.size());
}


TEST(container_slice, vector_slice_part)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin() + 4, input.end() - 4);
	EXPECT_EQ(slice.size(), 16 - 8);
}


TEST(container_slice, vector_slice_change_it)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> output = { 0x54, 0x68, 0x61, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin() + 4, input.end() - 4);

	for (auto& in : slice)
	{
		in = 0x0;
	}

	EXPECT_EQ(input, output);
}


TEST(container_slice, vector_slice_change_op)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> output = { 0x54, 0x68, 0x61, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin() + 4, input.end() - 4);

	for (int i = 0; i < slice.size(); i++)
	{
		slice[i] = 0x0;
	}

	EXPECT_EQ(input, output);
}

TEST(container_slice, array_slice_init)
{
	std::array<uint8_t, 16> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::array<uint8_t, 16>> slice(input.begin(), input.end());
	EXPECT_EQ(slice.size(), input.size());
}


TEST(container_slice, array_slice_change_it)
{
	std::array<uint8_t, 16> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::array<uint8_t, 16> output = { 0x54, 0x68, 0x61, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x46, 0x75 };
	container_slice<decltype(input)> slice(input.begin() + 4, input.end() - 4);

	for (auto& in : slice)
	{
		in = 0x0;
	}

	EXPECT_EQ(input, output);
}

#include "gtest/gtest.h"
#include "../jsrtp/cipher.h"
#include "../jsrtp/container_slice.h"
#include "../jsrtp/hash.h"
#include "../jsrtp/hmac.h"


TEST(AES, sbox)
{
	uint8_t in = 0x9a;
	uint8_t out = AES::sbox_substitute(in);
	uint8_t expected = 0xb8;

	EXPECT_EQ(out, expected);
}

TEST(AES, inverted_sbox)
{
	uint8_t in = 0xb8;
	uint8_t out = AES::sbox_inverse_substitute(in);
	uint8_t expected = 0x9a;

	EXPECT_EQ(out, expected);
}


TEST(AES, key_schedule)
{
	std::vector<uint8_t> test_key = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	AES::KeySchedule schedule;
	schedule.set_key(test_key);

	std::array<uint8_t, 16> e_rk1 = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	auto rk1_it = schedule.get_round_key(0);
	std::array<uint8_t, 16> rk1;
	std::copy(rk1_it, rk1_it + AES::block_size, rk1.begin());
	EXPECT_EQ(rk1, e_rk1);

	std::array<uint8_t, 16> e_rk4 = { 0xA1, 0x12, 0x02, 0xC9, 0xB4, 0x68, 0xBE, 0xA1, 0xD7, 0x51, 0x57, 0xA0, 0x14, 0x52, 0x49, 0x5B };
	auto rk4_it = schedule.get_round_key(4);
	std::array<uint8_t, 16> rk4;
	std::copy(rk4_it, rk4_it + AES::block_size, rk4.begin());
	EXPECT_EQ(rk4, e_rk4);

	std::array<uint8_t, 16> e_rk10 = { 0x28, 0xFD, 0xDE, 0xF8, 0x6D, 0xA4, 0x24, 0x4A, 0xCC, 0xC0, 0xA4, 0xFE, 0x3B, 0x31, 0x6F, 0x26 };
	auto rk10_it = schedule.get_round_key(10);
	std::array<uint8_t, 16> rk10;
	std::copy(rk10_it, rk10_it + AES::block_size, rk10.begin());
	EXPECT_EQ(rk10, e_rk10);
}


TEST(AES, encryption)
{
	AES aes_cipher;

	std::vector<uint8_t> test_key = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> plain_text = { 0x54, 0x77, 0x6F, 0x20, 0x4F, 0x6E, 0x65, 0x20, 0x4E, 0x69, 0x6E, 0x65, 0x20, 0x54, 0x77, 0x6F };
	std::vector<uint8_t> e_cipher_text = { 0x29, 0xC3, 0x50, 0x5F, 0x57, 0x14, 0x20, 0xF6, 0x40, 0x22, 0x99, 0xB3, 0x1A, 0x02, 0xD7, 0x3A };

	aes_cipher.set_key(test_key);

	auto cipher_text = aes_cipher.encrypt(plain_text);

	EXPECT_EQ(e_cipher_text, cipher_text);
}

TEST(AES, decryption)
{
	AES aes_cipher;

	std::vector<uint8_t> test_key = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> cipher_text = { 0x29, 0xC3, 0x50, 0x5F, 0x57, 0x14, 0x20, 0xF6, 0x40, 0x22, 0x99, 0xB3, 0x1A, 0x02, 0xD7, 0x3A };
	std::vector<uint8_t> e_plain_text = { 0x54, 0x77, 0x6F, 0x20, 0x4F, 0x6E, 0x65, 0x20, 0x4E, 0x69, 0x6E, 0x65, 0x20, 0x54, 0x77, 0x6F };


	aes_cipher.set_key(test_key);

	auto plain_text = aes_cipher.decrypt(cipher_text);

	EXPECT_EQ(e_plain_text, plain_text);
}


TEST(container_slice, vector_slice_init)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin(), input.end());
	EXPECT_EQ(slice.size(), input.size());
}


TEST(container_slice, vector_slice_part)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin() + 4, input.end() - 4);
	EXPECT_EQ(slice.size(), 16 - 8);
}


TEST(container_slice, vector_slice_change_it)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> output = { 0x54, 0x68, 0x61, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin() + 4, input.end() - 4);

	for (auto& in : slice)
	{
		in = 0x0;
	}

	EXPECT_EQ(input, output);
}


TEST(container_slice, vector_slice_change_op)
{
	std::vector<uint8_t> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::vector<uint8_t> output = { 0x54, 0x68, 0x61, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::vector<uint8_t>> slice(input.begin() + 4, input.end() - 4);

	for (int i = 0; i < slice.size(); i++)
	{
		slice[i] = 0x0;
	}

	EXPECT_EQ(input, output);
}

TEST(container_slice, array_slice_init)
{
	std::array<uint8_t, 16> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	container_slice<std::array<uint8_t, 16>> slice(input.begin(), input.end());
	EXPECT_EQ(slice.size(), input.size());
}


TEST(container_slice, array_slice_change_it)
{
	std::array<uint8_t, 16> input = { 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75 };
	std::array<uint8_t, 16> output = { 0x54, 0x68, 0x61, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x20, 0x46, 0x75 };
	container_slice<decltype(input)> slice(input.begin() + 4, input.end() - 4);

	for (auto& in : slice)
	{
		in = 0x0;
	}

	EXPECT_EQ(input, output);
}

TEST(sha1, sha1)
{
	SHA1 hash;
	const char* message = "The quick brown fox jumps over the lazy dog";
	const uint8_t* in = reinterpret_cast<const uint8_t*>(message);
	hash.append(in, std::strlen(message));

	std::vector<uint8_t> digest_e = { 0x2f, 0xd4, 0xe1, 0xc6, 0x7a, 0x2d, 0x28, 0xfc, 0xed, 0x84, 0x9e, 0xe1, 0xbb, 0x76, 0xe7, 0x39, 0x1b, 0x93, 0xeb, 0x12 };
	auto digest = hash.get_digest();

	EXPECT_EQ(digest_e, digest);
}

TEST(sha1, sha1_long)
{
	SHA1 hash;
	const char* message = "The quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dog";
	const uint8_t* in = reinterpret_cast<const uint8_t*>(message);
	hash.append(in, std::strlen(message));

	std::vector<uint8_t> digest_e = {0xd4,  0x2f, 0x85, 0x8a, 0xd8, 0x12, 0xfd, 0x98, 0x6f, 0xd8, 0xdc, 0x72, 0x16, 0xaf, 0x5f, 0x88, 0xbc, 0xaa, 0x14, 0x63};
	auto digest = hash.get_digest();

	EXPECT_EQ(digest_e, digest);
}

TEST(sha1, empty)
{
	SHA1 hash;
	std::vector<uint8_t> digest_e = { 0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09 };
	auto digest = hash.get_digest();
	EXPECT_EQ(digest_e, digest);
}


TEST(hmac_sha1, test_1)
{
	std::vector<uint8_t> key(20);
	std::fill_n(key.begin(), key.size(), 'e');
	std::vector<uint8_t> data = { 'H', 'i', ' ', 'T', 'h', 'e', 'r', 'e' };
	std::vector<uint8_t> expected = { 0xb2, 0x82, 0x6d, 0xb3, 0x7b, 0x5e, 0x8b, 0x1f, 0xd2, 0x2a, 0xcc, 0x70, 0x57, 0xbd, 0x6f, 0x9b, 0x73, 0x75, 0x06, 0xce };
	HMAC hmac_sha1;
	hmac_sha1.set_key(std::move(key));
	hmac_sha1.append(data.data(), data.size());
	auto digest = hmac_sha1.get_digest();

	EXPECT_EQ(digest, expected);
}

TEST(hmac_sha1, test_6)
{
	std::vector<uint8_t> key(80);
	std::fill_n(key.begin(), key.size(), 0xAA);
	const char* in = "Test Using Larger Than Block-Size Key - Hash Key First";

	HMAC hmac_sha1;
	hmac_sha1.set_key(std::move(key));
	hmac_sha1.append(reinterpret_cast<const uint8_t*>(in), std::strlen(in));

	std::vector<uint8_t> digest_e = { 0xaa, 0x4a, 0xe5, 0xe1, 0x52, 0x72, 0xd0, 0x0e, 0x95, 0x70, 0x56, 0x37, 0xce, 0x8a, 0x3b, 0x55, 0xed, 0x40, 0x21, 0x12 };
	auto digest = hmac_sha1.get_digest();

	EXPECT_EQ(digest, digest_e);
}

